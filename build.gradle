import org.gradle.internal.os.OperatingSystem

if (System.getenv('FORCE_LWJGL_NATIVE')) {
    project.ext.lwjglNativesName = System.getenv('FORCE_LWJGL_NATIVE')
} else {
    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            project.ext.lwjglNativesName = 'windows'
            break
        case OperatingSystem.LINUX:
            project.ext.lwjglNativesName = 'linux'
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNativesName = 'macos'
            break
    }
}
project.ext.lwjglNatives = "natives-$lwjglNativesName"

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group 'com.panguengine'
    version engineVersion

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'org.mockito:mockito-all:1.10.19'
        testImplementation 'name.falgout.jeffrey.testing.junit5:mockito-extension:1.2.1'
        testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    jar {
        from rootProject.file('LICENSE')
    }

    java {
        withSourcesJar()
    }

    compileJava {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            mavenLocal()
        }
    }

}
